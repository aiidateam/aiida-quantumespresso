[build-system]
requires = ['flit_core >=3.4,<4']
build-backend = 'flit_core.buildapi'

[project]
name = 'aiida-quantumespresso'
dynamic = ['version']
description = 'The official AiiDA plugin for Quantum ESPRESSO'
authors = [{name = 'The AiiDA team', email = 'developers@aiida.net'}]
readme = 'README.md'
license = {file = 'LICENSE.txt'}
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Framework :: AiiDA',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]
keywords = ['aiida', 'workflows']
requires-python = '>=3.8'
dependencies = [
    'aiida_core[atomic_tools]~=2.3',
    'aiida-pseudo~=1.0',
    'click~=8.0',
    'importlib_resources',
    'jsonschema',
    'numpy',
    'pydantic~=1.10,>=1.10.8',
    'packaging',
    'qe-tools~=2.0',
    'xmlschema~=1.2,>=1.2.5'
]

[project.urls]
Home = 'https://github.com/aiidateam/aiida-quantumespresso'
Source = 'https://github.com/aiidateam/aiida-quantumespresso'
Documentation = 'https://aiida-quantumespresso.readthedocs.io'

[project.optional-dependencies]
docs = [
    'sphinx~=6.2.1',
    'sphinx-copybutton~=0.5.2',
    'sphinx-book-theme~=1.0.1',
    'sphinx-click~=4.4.0',
    'sphinx-design~=0.4.1',
    'sphinxcontrib-details-directive~=0.1.0',
    'sphinx-autoapi~=2.0.1',
    'myst_parser~=1.0.0',
]
pre-commit = [
    'pre-commit~=2.17',
    'pylint~=2.17.2',
    'pylint-aiida~=0.1.1',
    'toml',
]
tests = [
    'pgtest~=1.3',
    'pytest~=6.0',
    'pytest-regressions~=2.3'
]

[project.scripts]
aiida-quantumespresso = 'aiida_quantumespresso.cli:cmd_root'

[project.entry-points.'aiida.calculations']
'quantumespresso.cp' = 'aiida_quantumespresso.calculations.cp:CpCalculation'
'quantumespresso.create_kpoints_from_distance' = 'aiida_quantumespresso.calculations.functions.create_kpoints_from_distance:create_kpoints_from_distance'
'quantumespresso.create_magnetic_configuration' = 'aiida_quantumespresso.calculations.functions.create_magnetic_configuration:create_magnetic_configuration'
'quantumespresso.merge_ph_outputs' = 'aiida_quantumespresso.calculations.functions.merge_ph_outputs:merge_ph_outputs'
'quantumespresso.dos' = 'aiida_quantumespresso.calculations.dos:DosCalculation'
'quantumespresso.epw' = 'aiida_quantumespresso.calculations.epw:EpwCalculation'
'quantumespresso.matdyn' = 'aiida_quantumespresso.calculations.matdyn:MatdynCalculation'
'quantumespresso.namelists' = 'aiida_quantumespresso.calculations.namelists:NamelistsCalculation'
'quantumespresso.neb' = 'aiida_quantumespresso.calculations.neb:NebCalculation'
'quantumespresso.ph' = 'aiida_quantumespresso.calculations.ph:PhCalculation'
'quantumespresso.pp' = 'aiida_quantumespresso.calculations.pp:PpCalculation'
'quantumespresso.projwfc' = 'aiida_quantumespresso.calculations.projwfc:ProjwfcCalculation'
'quantumespresso.pw' = 'aiida_quantumespresso.calculations.pw:PwCalculation'
'quantumespresso.pw2gw' = 'aiida_quantumespresso.calculations.pw2gw:Pw2gwCalculation'
'quantumespresso.pw2wannier90' = 'aiida_quantumespresso.calculations.pw2wannier90:Pw2wannier90Calculation'
'quantumespresso.pwimmigrant' = 'aiida_quantumespresso.calculations.pwimmigrant:PwimmigrantCalculation'
'quantumespresso.q2r' = 'aiida_quantumespresso.calculations.q2r:Q2rCalculation'
'quantumespresso.seekpath_structure_analysis' = 'aiida_quantumespresso.calculations.functions.seekpath_structure_analysis:seekpath_structure_analysis'
'quantumespresso.xspectra' = 'aiida_quantumespresso.calculations.xspectra:XspectraCalculation'
'quantumespresso.open_grid' = 'aiida_quantumespresso.calculations.open_grid:OpenGridCalculation'

[project.entry-points.'aiida.data']
'quantumespresso.force_constants' = 'aiida_quantumespresso.data.force_constants:ForceConstantsData'
'quantumespresso.hubbard_structure' = 'aiida_quantumespresso.data.hubbard_structure:HubbardStructureData'

[project.entry-points.'aiida.parsers']
'quantumespresso.cp' = 'aiida_quantumespresso.parsers.cp:CpParser'
'quantumespresso.dos' = 'aiida_quantumespresso.parsers.dos:DosParser'
'quantumespresso.matdyn' = 'aiida_quantumespresso.parsers.matdyn:MatdynParser'
'quantumespresso.neb' = 'aiida_quantumespresso.parsers.neb:NebParser'
'quantumespresso.ph' = 'aiida_quantumespresso.parsers.ph:PhParser'
'quantumespresso.pp' = 'aiida_quantumespresso.parsers.pp:PpParser'
'quantumespresso.projwfc' = 'aiida_quantumespresso.parsers.projwfc:ProjwfcParser'
'quantumespresso.pw' = 'aiida_quantumespresso.parsers.pw:PwParser'
'quantumespresso.pw2gw' = 'aiida_quantumespresso.parsers.pw2gw:Pw2gwParser'
'quantumespresso.q2r' = 'aiida_quantumespresso.parsers.q2r:Q2rParser'
'quantumespresso.pw2wannier90' = 'aiida_quantumespresso.parsers.pw2wannier90:Pw2wannier90Parser'
'quantumespresso.xspectra' = 'aiida_quantumespresso.parsers.xspectra:XspectraParser'
'quantumespresso.open_grid' = 'aiida_quantumespresso.parsers.open_grid:OpenGridParser'

[project.entry-points.'aiida.tools.calculations']
'quantumespresso.pw' = 'aiida_quantumespresso.tools.calculations.pw:PwCalculationTools'

[project.entry-points.'aiida.tools.data.orbitals']
'spinorbithydrogen' = 'aiida_quantumespresso.tools.data.orbital.spinorbithydrogen:SpinorbitHydrogenOrbital'
'noncollinearhydrogen' = 'aiida_quantumespresso.tools.data.orbital.noncollinearhydrogen:NoncollinearHydrogenOrbital'

[project.entry-points.'aiida.workflows']
'quantumespresso.ph.base' = 'aiida_quantumespresso.workflows.ph.base:PhBaseWorkChain'
'quantumespresso.pw.base' = 'aiida_quantumespresso.workflows.pw.base:PwBaseWorkChain'
'quantumespresso.pw.relax' = 'aiida_quantumespresso.workflows.pw.relax:PwRelaxWorkChain'
'quantumespresso.pw.bands' = 'aiida_quantumespresso.workflows.pw.bands:PwBandsWorkChain'
'quantumespresso.q2r.base' = 'aiida_quantumespresso.workflows.q2r.base:Q2rBaseWorkChain'
'quantumespresso.matdyn.base' = 'aiida_quantumespresso.workflows.matdyn.base:MatdynBaseWorkChain'
'quantumespresso.pdos' = 'aiida_quantumespresso.workflows.pdos:PdosWorkChain'
'quantumespresso.xspectra.base' = 'aiida_quantumespresso.workflows.xspectra.base:XspectraBaseWorkChain'
'quantumespresso.xps' = 'aiida_quantumespresso.workflows.xps:XpsWorkChain'
'quantumespresso.xspectra.core' = 'aiida_quantumespresso.workflows.xspectra.core:XspectraCoreWorkChain'
'quantumespresso.xspectra.crystal' = 'aiida_quantumespresso.workflows.xspectra.crystal:XspectraCrystalWorkChain'

[tool.flit.module]
name = 'aiida_quantumespresso'

[tool.flit.sdist]
exclude = [
    'docs/',
    'tests/',
]

[tool.flynt]
line-length = 120
fail-on-change = true

[tool.isort]
force_sort_within_sections = true
include_trailing_comma = true
line_length = 120
multi_line_output = 3  # this configuration is compatible with yapf

[tool.pydocstyle]
ignore = [
    'D104',
    'D202',
    'D203',
    'D213'
]

[tool.pylint.master]
load-plugins = ['pylint_aiida','pylint.extensions.no_self_use']

[tool.pylint.format]
max-line-length = 120

[tool.pylint.tool-check]
generated-members = 'self.exit_codes.*'

[tool.pylint.messages_control]
disable = [
    'duplicate-code',
    'fixme',
    'inconsistent-return-statements',
    'import-outside-toplevel',
    'locally-disabled',
    'logging-format-interpolation',
    'no-else-raise',
    'too-many-arguments',
    'too-many-ancestors',
    'too-many-branches',
    'too-many-locals',
    'use-dict-literal',
]

[tool.pylint.basic]
good-names = [
    'i',
    'j',
    'k',
    'SsspFamily',
    'StructureData',
    'SinglefileData',
    'UpfData',
    'HpCalculation',
    'PwCalculation',
]

[tool.pytest.ini_options]
minversion = '6.0'
testpaths = [
    'tests',
]
filterwarnings = [
    'ignore:Creating AiiDA configuration folder.*:UserWarning',
    'ignore::DeprecationWarning:frozendict:',
    'ignore::DeprecationWarning:pkg_resources:',
    'ignore::DeprecationWarning:sqlalchemy_utils:',
]

[tool.yapf]
align_closing_bracket_with_visual_indent = true
based_on_style = 'google'
coalesce_brackets = true
column_limit = 120
dedent_closing_brackets = true
indent_dictionary_value = false
split_arguments_when_comma_terminated = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    py{38,39,310,311}
    py38-pre-commit

[testenv]
description = Run the pytest tests
usedevelop=True
extras = tests
commands = pytest {posargs}

[testenv:py38-pre-commit]
description = Run the pre-commit checks
extras =
    tests
    pre-commit
commands = pre-commit run {posargs}
"""
