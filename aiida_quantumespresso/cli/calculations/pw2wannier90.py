# -*- coding: utf-8 -*-
"""
Command line scripts to launch a `Pw2wannier90Calculation` for testing and demonstration purposes.

This launcher assumes that the SEED and the PREFIX used in the previous PW calculation (parent_folder)
are the same as those hardcoded in the Pw2wannier90Calculation class.
We also hardcode some parameters and options.
"""
from __future__ import absolute_import

from aiida.cmdline.params import options, types
from aiida.cmdline.params.options import OverridableOption
from aiida.cmdline.utils import decorators

from ..utils import launch
from ..utils import options as options_qe
from . import cmd_launch

PARENT_FOLDER = OverridableOption(
    '-F',
    '--parent_folder',
    'parent_folder',
    metavar='RemoteData/FolderData',  # placeholder in the help text
    type=types.NodeParamType(sub_classes=('aiida.data:remote', 'aiida.data:folder')),
    help='A RemoteData or FolderData node identified by its ID or UUID.'
)

SINGLE_FILE = OverridableOption(
    '-S',
    '--single_file',
    'single_file',
    metavar='SinglefileData',  # placeholder in the help text
    type=types.NodeParamType(sub_classes=('aiida.data:singlefile',)),
    help='A SinglefileData node identified by its ID or UUID.'
)


@cmd_launch.command('pw2wannier90')
@options.CODE(required=True, type=types.CodeParamType(entry_point='quantumespresso.pw2wannier90'))
@PARENT_FOLDER(required=True, help='RemoteData folder containing the output of a PW calculation')
@SINGLE_FILE(required=True, help='SinglefileData containing the .nnkp file generated by a wannier90.x preprocessing')
@options_qe.MAX_NUM_MACHINES()
@options_qe.MAX_WALLCLOCK_SECONDS()
@options_qe.WITH_MPI()
@options_qe.DAEMON()
@decorators.with_dbenv()
def launch_calculation(code, parent_folder, single_file, max_num_machines, max_wallclock_seconds, with_mpi, daemon):
    """Run a Pw2wannier90Calculation with some sample parameters and the provided inputs."""
    from aiida.orm import Dict
    from aiida.plugins import CalculationFactory
    from aiida_quantumespresso.utils.resources import get_default_options

    parameters = {
        'inputpp': {
            'write_amn': True,
            'write_mmn': True,
            'write_unk': False,
            'scdm_proj': True,
            'scdm_entanglement': 'isolated',
        }
    }

    settings = {'ADDITIONAL_RETRIEVE_LIST': ['*.amn', '*.mmn', '*.eig']}

    inputs = {
        'code': code,
        'parent_folder': parent_folder,
        'nnkp_file': single_file,
        'parameters': Dict(dict=parameters),
        'settings': Dict(dict=settings),
        'metadata': {
            'options': get_default_options(max_num_machines, max_wallclock_seconds, with_mpi),
        }
    }

    launch.launch_process(CalculationFactory('quantumespresso.pw2wannier90'), daemon, **inputs)
